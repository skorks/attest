# Generated by jeweler
# DO NOT EDIT THIS FILE DIRECTLY
# Instead, edit Jeweler::Tasks in Rakefile, and run 'rake gemspec'
# -*- encoding: utf-8 -*-

Gem::Specification.new do |s|
  s.name = %q{attest}
  s.version = "0.2.0"

  s.required_rubygems_version = Gem::Requirement.new(">= 0") if s.respond_to? :required_rubygems_version=
  s.authors = ["Alan Skorkin"]
  s.date = %q{2010-12-21}
  s.default_executable = %q{attest}
  s.description = %q{Attest allows you to define spec-like tests inline (within the same file as your actual code) which means almost non-existant overheads to putting some tests around your code. It also tries to not be too prescriptive regarding the 'right' way to test. You want to test private methods - go ahead, access unexposed instance variables - no worries, pending and disabled tests are first class citizens. Don't like the output format, use a different one or write your own. Infact you don't even have to define you tests inline if you prefer the 'traditional' way, separate directory and all. You should be allowed to test your code the way you want to, not the way someone else says you have to!}
  s.email = %q{alan@skorks.com}
  s.executables = ["attest"]
  s.extra_rdoc_files = [
    "LICENSE",
    "README.rdoc"
  ]
  s.files = [
    ".document",
    "Gemfile",
    "Gemfile.lock",
    "LICENSE",
    "README.rdoc",
    "Rakefile",
    "VERSION",
    "attest.gemspec",
    "bin/attest",
    "doodle.txt",
    "examples/basic_functionality_example.rb",
    "examples/mocha_example.rb",
    "examples/module_example.rb",
    "examples/more/multiple_context_example.rb",
    "examples/more/nesting/expectations_as_tests_example.rb",
    "lib/attest.rb",
    "lib/attest/config.rb",
    "lib/attest/core_ext/kernel.rb",
    "lib/attest/core_ext/object.rb",
    "lib/attest/core_ext/proc.rb",
    "lib/attest/execution_context.rb",
    "lib/attest/expectation_result.rb",
    "lib/attest/interface/output_writer_configurator.rb",
    "lib/attest/interface/possible_tests_configurator.rb",
    "lib/attest/interface/test_double_configurator.rb",
    "lib/attest/output/basic_output_writer.rb",
    "lib/attest/output/failures_only_output_writer.rb",
    "lib/attest/output/output_writer.rb",
    "lib/attest/output/output_writer_interface.rb",
    "lib/attest/output/test_unit_output_writer.rb",
    "lib/attest/proc/proc_source_reader.rb",
    "lib/attest/rake/attesttask.rb",
    "lib/attest/test_container.rb",
    "lib/attest/test_loader.rb",
    "lib/attest/test_object.rb",
    "lib/attest/test_parser.rb",
    "lib/trollop.rb",
    "spec/interface/output_writer_configurator_test.rb",
    "spec/interface/possible_tests_configurator_test.rb",
    "spec/interface/test_double_configurator_test.rb",
    "spec/output/output_writer_test.rb",
    "spec/tmp/new_require_test.rb"
  ]
  s.homepage = %q{http://github.com/skorks/attest}
  s.require_paths = ["lib"]
  s.rubygems_version = %q{1.3.7}
  s.summary = %q{An inline unit testing/spec framework that doesn't force you to follow arbitrary rules}
  s.test_files = [
    "examples/basic_functionality_example.rb",
    "examples/mocha_example.rb",
    "examples/module_example.rb",
    "examples/more/multiple_context_example.rb",
    "examples/more/nesting/expectations_as_tests_example.rb",
    "spec/interface/output_writer_configurator_test.rb",
    "spec/interface/possible_tests_configurator_test.rb",
    "spec/interface/test_double_configurator_test.rb",
    "spec/output/output_writer_test.rb",
    "spec/tmp/new_require_test.rb"
  ]

  if s.respond_to? :specification_version then
    current_version = Gem::Specification::CURRENT_SPECIFICATION_VERSION
    s.specification_version = 3

    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then
      s.add_development_dependency(%q<mocha>, [">= 0"])
      s.add_development_dependency(%q<fakefs>, [">= 0"])
    else
      s.add_dependency(%q<mocha>, [">= 0"])
      s.add_dependency(%q<fakefs>, [">= 0"])
    end
  else
    s.add_dependency(%q<mocha>, [">= 0"])
    s.add_dependency(%q<fakefs>, [">= 0"])
  end
end

