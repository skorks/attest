rough features 

able to write single test in the same file as code under test, should not be able to accidentally run the test code
able to go through all the ruby files in the project and run any tests that are found 
able to print progress to the commandline as tests are being run 
do not pollute the core classes unnecessarily

able to go through all the ruby files in supplied directory running tests when found





passing a ruby file to attest should print out whether or not there may be any inline tests in the ruby file


most basic
- setup and teardown DONE
- specify test for regular public method DONE
- specify test for a private method DONE
- ability to read instance variable of object under test without having to specify a reader DONE
- the most basic result output DONE
- able to detect when test expectation fails DONE
- execute tests for single ruby file if any present DONE
- able to detect when test errors out and gracefully say so in output DONE
- all object to have a should_equal expectation method DONE
- all objects should have a should_not_equal expectation method DONE

- should be able to specify a test anonymously without providing description
- ability to give a test an id as well as description
- ability to specify that no setup or teardown should be run for the test
- ability to specify multiple setups and teardowns and register specific setups and teardowns to run for specific tests
- ability to magically include module in an object and test its methods while it is included in an object
- should provide the error message if test errors out  DONE
- should provide the error trace if a test has errored
- all objects have access to a should_raise expectation DONE
- should be able to produce a summary of execution at the end, with count of successes, failures and errors
- should be able to produce shorthand output while running with a summary at the end (test unit style shorthand), controlled by cli parameter
- should have a should_fail expectation, possibly for tests that haven't been implemented aliased to not_implemented, not_implemented_failing, not_implemented_passing
- should have a should_be_true expectation type for more flexibility
- don't pollute global objects with methods, instead Attest.this_tests do end to initiate the context, within there objects are augmented by methods, but outside of it they are not
- you can require the library without augmenting objects with extra methods, only when you call do objects get augmented and should test for the fact that a method we're trying to augment with already exists, alternatively, don't ever require this library directly then we don't have an issue
