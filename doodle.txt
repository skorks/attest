rough features 

able to write single test in the same file as code under test, should not be able to accidentally run the test code
able to go through all the ruby files in the project and run any tests that are found 
able to print progress to the commandline as tests are being run 
do not pollute the core classes unnecessarily

able to go through all the ruby files in supplied directory running tests when found





passing a ruby file to attest should print out whether or not there may be any inline tests in the ruby file


most basic
- setup and teardown DONE
- specify test for regular public method DONE
- specify test for a private method DONE
- ability to read instance variable of object under test without having to specify a reader DONE
- the most basic result output DONE
- able to detect when test expectation fails DONE
- execute tests for single ruby file if any present DONE
- able to detect when test errors out and gracefully say so in output DONE
- all object to have a should_equal expectation method DONE
- all objects should have a should_not_equal expectation method DONE

- should be able to specify a test anonymously without providing description
- ability to give a test an id as well as description
- ability to specify that no setup or teardown should be run for the test
- ability to specify multiple setups and teardowns and register specific setups and teardowns to run for specific tests
- ability to magically include module in an object and test its methods while it is included in an object
- should provide the error message if test errors out  DONE
- should provide the error trace if a test has errored DONE
- all objects have access to a should_raise expectation DONE
- should be able to produce a summary of execution at the end, with count of successes, failures and errors DONE
- should be able to produce shorthand output while running with a summary at the end (test unit style shorthand), controlled by cli parameter
- should have a should_fail expectation, possibly for tests that haven't been implemented aliased to not_implemented, not_implemented_failing, not_implemented_passing
- should have a should_be_true expectation type for more flexibility DONE
- test that are defined without a block should be tagged as not implemented in the output and in the summary
- you can require the library without augmenting objects with extra methods, only when you call do objects get augmented and should test for the fact that a method we're trying to augment with already exists, alternatively, don't ever require this library directly then we don't have an issue DONE

- the should methods should return an expectation object (itself) DONE
- when deliberately failing should not actually print an error but should be a failure with a message instead DONE
- the output writer should be a separate class to allow for different writers DONE
- work out what methods need to be on the output writer class and hook them in where tests are run DONE
- work out what other expectations need to be on the execution context intself (should_raise, should_be_true) DONE
- work out how to easily implement negation of the positive expectations on the execution context
- hook in configuration into the framework DONE
- make it configurable via configuration and command line the name of the method that begins a test context (this_tests)
- make it configurable via config and command line the name of the method that would produce an expectation object (itself or should), these are the only methods that extend core for now
- try to execute existing method missing and if still an error then execute my method missing and fall back to existing method missing, so that don't accidentally kill method missing functionality that people wrote themselves
- produce a short format output writer as well as a basic long format one to make sure that have ability to hook in different output writers
- should be able to configure attest via file (attest.config in same directory, or give location of config as command line param, or via .attest file in home dir or via a configuration block in a file under test, each level can override the other)
- what expectation methods are actaully needed on the objects in the test methods themselves (should_be_true, should_equal etc) work out negation for these ones as well 
- what methods should the expectation object have and how to allow to chain the methods and have everything work 
- all test context should have an id and if one is not provided it should be generated
- all test methods should have an id and if one is not provided it should be generated 
- before and after blocks should be able to refer to tests they are targeting by the test id
- test should be able to specify if they don't want the befores and afters to be run for them (this will take precedence over everything else)
- need to have a should_fail execution context method, with alias of fail  
- should be able to call should_be empty on an object where empty is a method on the object, should_equal size 5 where size is a method on the object, i.e. boolean method on the objects gets used as a predicate
- a expectation that this object as the same as another object, i.e. exactly the same object not an equal one
- for exceptions, should_raise(XyzError) {x.some_call}.with_message(/some message regex/), the XyzError and the regex should be optional DONE
- test methods in a module that is built for class inclusion
- test free floating methods that don't belong to a class or a module
- an anonymous test without description similat to the test pile below but still for only one thing
- a test pile method where you want to test random methods or do lots of assertions at the same time without having to think of a name for it, should introspect somehow what is/will be run and work out descriptions from that
- ability to define matchers as lambdas would be good i.e. obj.should_be happy where happy is a lambda that returns a boolean value



- a rake task to run the tests instead of a separate executable, configuration should be done through the rake task
- ability to mock stuff out using some of the popular mocking frameworks, ability to plug in different one by config, including my own by default which hasn't been written yet
- potentially later on think about doing nested contexts as well as shared contexts
- some way to potentially work out if files are ruby even if no .rb extension or alternatively pass a glob on the command line to match files
- allow redefining of the name of the main context method through the command line(e.g. rather than this_tests allow person to name it whatever they want)


- kill the This class and turn it back into a this_tests method on Kernel DONE
- merge everything into Master DONE
- branch master into a Hooks branch and leave to have a look at later DONE
- remove the hooks stuff from master DONE
- add the file in which the tests were found to the output of the tests DONE
- add functionality to allow a directory with ruby files to be parsed for tests and all tests to be run if any are found, non-recursively DONE
- add functionality to allow a directory to be parsed for tests recursively DONE
- allow multiple context within the same file to work properly and execute properly DONE
- make sure can test methods in a module not just in a class, magically included in a class DONE
- make sure can test class methods DONE
- make sure can test methods that don't belong to a module or a class DONE
- when multiple contexts in the same file, only print the name of the file to the command line once DONE
- don't print summaries after every context, only a totals summary at the end DONE
- make it so that tests can take an options hash and one of the options should be to not run setup or teardown for the test, perhaps make it not part of the opts hash DONE
- should be able to specify a test without a body for it to appear in the output as pending DONE
- refactor all example code so it is a bit nicer and more representative
- once all the above are done, create some RDOC documentation to describe the basic features and usage of the framework
- also fix up the description and extended description, make sure everything looks proper as far as doco is concerned on github etc.
- if everything is ok at this point, do a first public release of the gem (give it an appropriately betaish version number)
- make sure the gem is available through rubyforge as well as wherever else is appropriate, e.g. gemcutter


- when committing need to make sure there is a valid gemspec
- when used with bundler dependencies like trollop don't come trhough so can't execute attest properly get an error instead need to detect if being used via bundler and do a bundle setup etc.

next release

- integrate mocha so that can mock using mocha 
- output calculations of expectations not just tests
- allow expectations to be specified directly as tests (perhaps failures should contain the block that has failed)
- create a failures only output writer and allow it to be configured
- create a test/unit style output writer and allow it to be configured
- test out with method missing defined on the class, does it still work ok
- make sure if method missing is defined it is tried out first before the new_method_missing on kernel takes over
- should be able to disable a test so that it is not executed, but is listed as disabled in the output

next release 2

- write and integrate own test double framework (look at rr for syntax suggestions)
- create some tests using the framework itself around the framework classes (minimal test suite)
- allow expectations to be made on objects themselves
- allow for tests to be given ids as well as descriptions
- allow for multiple before and after blocks should specify which test to run this block for using ids of tests as parameters

next release 3
- come up with some more useful expectations, both on object and as standalone methods of test
- look into rails stuff regarding expectations and idioms etc
- should somehow be able to require all the necessary ruby files that are needed when a test is run for the test not to fail, e.g. because ruby files depend on other ruby files



what to say in readme
give an example of usage
talk about how to define tests inline
talk about how to execute the tests in one file or directory etc
list the currently supported expectations
talk about pendind tests
talk about the fact that other output writers are coming
talk about the fact that you can disable setup for particular tests
talk about how to test modules within an included class
no nested context as yet, but can define multiple top level ones, no shared tests or contexts as yet
mention the examples directory but it is currently crappy
